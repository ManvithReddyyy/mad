1.	a) Validate the registration, user login, user profile and payment pages using JavaScript. Make use of any needed JavaScript objects. 
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Simple Form Validation</title>
  <style>
    body { font-family: Arial; margin: 20px; }
    form { margin-bottom: 25px; }
    label { display: block; margin-top: 10px; }
    input { padding: 6px; width: 250px; }
    .error { color: red; font-size: 0.9em; }
  </style>
</head>
<body>

<h2>Registration</h2>
<form onsubmit="return validateRegistration()">
  <label>Full Name: <input id="r_name"></label>
  <label>Email: <input id="r_email"></label>
  <label>Password: <input id="r_pass" type="password"></label>
  <label>Confirm Password: <input id="r_pass2" type="password"></label>
  <div id="r_error" class="error"></div>
  <button type="submit">Register</button>
</form>

<h2>Login</h2>
<form onsubmit="return validateLogin()">
  <label>Email: <input id="l_email"></label>
  <label>Password: <input id="l_pass" type="password"></label>
  <div id="l_error" class="error"></div>
  <button type="submit">Login</button>
</form>

<h2>Payment</h2>
<form onsubmit="return validatePayment()">
  <label>Card Number: <input id="p_card" maxlength="16"></label>
  <label>Expiry (MM/YY): <input id="p_exp" maxlength="5" placeholder="MM/YY"></label>
  <label>CVV: <input id="p_cvv" maxlength="3"></label>
  <div id="p_error" class="error"></div>
  <button type="submit">Pay</button>
</form>

<script>
function isEmail(e){ return e.includes("@") && e.includes("."); }

function validateRegistration(){
  const n=document.getElementById("r_name").value.trim();
  const e=document.getElementById("r_email").value.trim();
  const p=document.getElementById("r_pass").value;
  const p2=document.getElementById("r_pass2").value;
  const err=document.getElementById("r_error");

  if(n.length<3) {err.textContent="Name too short"; return false;}
  if(!isEmail(e)) {err.textContent="Invalid email"; return false;}
  if(p.length<6) {err.textContent="Password too short"; return false;}
  if(p!==p2) {err.textContent="Passwords don't match"; return false;}
  err.textContent="";
  alert("Registration successful!");
  return false;
}

function validateLogin(){
  const e=document.getElementById("l_email").value.trim();
  const p=document.getElementById("l_pass").value;
  const err=document.getElementById("l_error");

  if(!isEmail(e)){err.textContent="Enter valid email";return false;}
  if(p===""){err.textContent="Enter password";return false;}
  err.textContent="";
  alert("Login successful!");
  return false;
}

function validatePayment(){
  const c=document.getElementById("p_card").value.trim();
  const ex=document.getElementById("p_exp").value.trim();
  const cv=document.getElementById("p_cvv").value.trim();
  const err=document.getElementById("p_error");

  if(c.length!==16 || isNaN(c)){err.textContent="Enter 16-digit card number";return false;}
  if(!/^\d{2}\/\d{2}$/.test(ex)){err.textContent="Use MM/YY format";return false;}
  if(cv.length!==3 || isNaN(cv)){err.textContent="Enter 3-digit CVV";return false;}
  err.textContent="";
  alert("Payment successful!");
  return false;
}
</script>

</body>
</html>


Create an HTML page where you apply margin, border, padding, and content width,     and show how changing one property influences the total size of the box.
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Box Model</title>
    <style>
        body {
            font-family: monospace;
            display: flex; /* Simple layout for side-by-side comparison */
            gap: 20px;
            justify-content: center;
            align-items: flex-start;
            padding-top: 50px;
        }

        .box {
            /* Standard Box Model Values */
            width: 100px; /* Content Width */
            height: 50px;
            background-color: #aed9e0;
            text-align: center;
            line-height: 50px;
            color: #004d61;
            font-size: 12px;
            
            /* Box Model Properties */
            padding: 10px;    /* Padding: adds 20px (10 L + 10 R) to width */
            border: 2px solid #004d61; /* Border: adds 4px (2 L + 2 R) to width */
            margin: 15px;     /* Margin: space *outside* the box */
        }
        
        .box-changed {
            /* Same as .box initially */
            width: 100px;
            height: 50px;
            background-color: #f7a8a8;
            text-align: center;
            line-height: 50px;
            color: #7b0000;
            font-size: 12px;

            /* **Influence Demonstrated: Increased Border** */
            padding: 10px;
            border: 10px solid #7b0000; /* Border changed from 2px to 10px */
            margin: 15px;
        }

        .note {
            position: absolute;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 14px;
            text-align: center;
            font-style: italic;
        }
    </style>
</head>
<body>
    <div class="note">
        Default Box Model ($\text{Content-Box}$): Border/Padding add to the total size.
    </div>
    
    <div class="box">
        Box 1 (Standard)
        <br>Total Width: 124px
        </div>
    
    <div class="box-changed">
        Box 2 (Border Changed)
        <br>Total Width: 140px
        <br>(Larger due to Border)
    </div>

</body>
</html>




built scienfic calcy
<!DOCTYPE html>
<html>
<head>
  <title>Basic Calculator</title>
  <style>
    .box {
      width: 220px;
      margin: 100px auto;
      border: 2px solid black;
      padding: 10px;
      text-align: center;
    }
    input {
      width: 200px;
      height: 30px;
      text-align: right;
      margin-bottom: 10px;
    }
  </style>
</head>
<body>

  <div class="box">
    <input type="text" id="screen" readonly>

    <div>
      <button onclick="clr()">C</button>
      <button onclick="press('/')">/</button>
      <button onclick="press('')"></button>
      <button onclick="back()">DEL</button>
    </div>
    <div>
      <button onclick="press('7')">7</button>
      <button onclick="press('8')">8</button>
      <button onclick="press('9')">9</button>
      <button onclick="press('-')">-</button>
    </div>
    <div>
      <button onclick="press('4')">4</button>
      <button onclick="press('5')">5</button>
      <button onclick="press('6')">6</button>
      <button onclick="press('+')">+</button>
    </div>
    <div>
      <button onclick="press('1')">1</button>
      <button onclick="press('2')">2</button>
      <button onclick="press('3')">3</button>
      <button onclick="calc()">=</button>
    </div>
    <div>
      <button onclick="press('0')">0</button>
      <button onclick="press('.')">.</button>
    </div>
  </div>

  <script>
    const screen = document.getElementById("screen");

    function press(val) {
      screen.value += val;
    }

    function clr() {
      screen.value = "";
    }

    function back() {
      screen.value = screen.value.slice(0, -1);
    }

    function calc() {
      try {
        screen.value = eval(screen.value);
      } catch {
        screen.value = "Error";
      }
    }
  </script>

</body>
</html>

dtd
1. books.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE BookData SYSTEM "books.dtd">
<BookData>
  <Book>
    <Title>Learn XML</Title>
    <Author>John Doe</Author>
    <Price>299.50</Price>
  </Book>
</BookData>

📘 2. books.dtd
<!ELEMENT BookData (Book+)>
<!ELEMENT Book (Title, Author, Price)>
<!ELEMENT Title (#PCDATA)>
<!ELEMENT Author (#PCDATA)>
<!ELEMENT Price (#PCDATA)>

🧱 3. books.xsd
<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="BookData">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Book" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Title" type="xs:string"/>
              <xs:element name="Author" type="xs:string"/>
              <xs:element name="Price" type="xs:decimal"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>



3.	a) Write a java program to establish a connection to a database and execute simple SQL 
         queries. 

// JDBCExample.java
import java.sql.*;

public class JDBCExample {
  public static void main(String[] args) {
    String url = "jdbc:mysql://localhost:3306/testdb"; // DB name
    String user = "root"; 
    String pass = "your_password"; // your MySQL Workbench password

    try {
      Connection con = DriverManager.getConnection(url, user, pass);
      Statement st = con.createStatement();
      ResultSet rs = st.executeQuery("SELECT * FROM users");
      while (rs.next()) {
        System.out.println(rs.getInt(1) + " - " + rs.getString(2));
      }
      con.close();
    } catch (Exception e) {
      System.out.println(e);
    }
  }
}
🧭 Step-by-Step Procedure (Workbench + Java)
🪜 1. Create database and table in Workbench
Open MySQL Workbench → click your local connection → in the SQL editor, run:

sql
Copy code
CREATE DATABASE testdb;
USE testdb;

CREATE TABLE users (
  id INT PRIMARY KEY,
  name VARCHAR(50)
);

INSERT INTO users VALUES
(1, 'Nikhil'),
(2, 'Suraj');
✅ Verify:

sql
Copy code
SELECT * FROM users;
🪜 2. Download MySQL JDBC Driver
Go to 👉 https://dev.mysql.com/downloads/connector/j/

Download Platform Independent ZIP.

Extract it and note the file path of:

Copy code
mysql-connector-j-9.0.0.jar
🪜 3. Compile and Run in Terminal / Command Prompt
Navigate to the folder where your Java file is saved and run:

🧩 Compile
bash
Copy code
javac -cp .;"C:\path\to\mysql-connector-j-9.0.0.jar" JDBCExample.java
▶️ Run
bash
Copy code
java -cp .;"C:\path\to\mysql-connector-j-9.0.0.jar" JDBCExample

       b) Design a responsive personal blog webpage using HTML5 and CSS 
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>Dev's Blog</title>
<style>
body {font-family:Arial; margin:0; padding:0; background:#f7f7f7; color:#222;}
header {background:#2a9d8f; color:white; text-align:center; padding:20px;}
.container {max-width:900px; margin:20px auto; padding:0 10px;}
.grid {display:grid; grid-template-columns:2fr 1fr; gap:15px;}
.post, .sidebar {background:white; padding:15px; border-radius:6px;}
@media(max-width:800px){.grid{grid-template-columns:1fr;}}
</style>
</head>
<body>

<header>
  <h1>Dev's Blog</h1>
  <p>Thoughts on code & life</p>
</header>

<div class="container">
  <div class="grid">
    <main>
      <div class="post"><h2>Post 1</h2><p>Some content here...</p></div>
      <div class="post"><h2>Post 2</h2><p>More content here...</p></div>
    </main>
    <aside class="sidebar">
      <h3>About</h3><p>Short bio...</p>
      <h3>Categories</h3><ul><li>Web</li><li>AI</li></ul>
    </aside>
  </div>
</div>

</body>
</html>


4.	a) Write a java program to demonstrate the usage of JDBC in performing various DML 
           statements. Use prepared statements and callable statements.
import java.sql.*;

public class DMLExample {
    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/mydb";
        try (Connection con = DriverManager.getConnection(url, "root", "pass")) {

            // INSERT
            PreparedStatement ps = con.prepareStatement("INSERT INTO students(name, age) VALUES (?, ?)");
            ps.setString(1, "Rama");
            ps.setInt(2, 21);
            System.out.println("Inserted: " + ps.executeUpdate());

            // UPDATE
            ps = con.prepareStatement("UPDATE students SET age=? WHERE name=?");
            ps.setInt(1, 22);
            ps.setString(2, "Rama");
            System.out.println("Updated: " + ps.executeUpdate());

            // CALL stored procedure
            CallableStatement cs = con.prepareCall("{call inc_age(?)}");
            cs.setInt(1, 1);
            cs.execute();
            System.out.println("Stored procedure called");

            con.close();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}
javac -cp .;mysql-connector-j-9.0.0.jar DMLExample.java
java -cp .;mysql-connector-j-9.0.0.jar DMLExample
CREATE DATABASE IF NOT EXISTS mydb;
USE mydb;

CREATE TABLE students (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(50),
  age INT
);

        b) Design a responsive photo gallery using the CSS3 Grid layout. Your layout should have    3 columns on desktop, 2 columns on tablets, and 1 column on mobile devices.
<!-- gallery.html -->
<!doctype html>
<html>
<head>
<meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Photo Gallery</title>
<style>
.gallery{display:grid;grid-template-columns:repeat(3,1fr);gap:10px;max-width:1000px;margin:20px auto;}
.gallery img{width:100%;height:200px;object-fit:cover;border-radius:6px}
@media (max-width:900px){ .gallery{grid-template-columns:repeat(2,1fr);} }
@media (max-width:600px){ .gallery{grid-template-columns:1fr;} .gallery img{height:250px} }
</style>
</head>
<body>
<div class="gallery">
  <img src="https://picsum.photos/seed/1/800/600" alt="">
  <img src="https://picsum.photos/seed/2/800/600" alt="">
  <img src="https://picsum.photos/seed/3/800/600" alt="">
  <img src="https://picsum.photos/seed/4/800/600" alt="">
  <img src="https://picsum.photos/seed/5/800/600" alt="">
  <img src="https://picsum.photos/seed/6/800/600" alt="">
</div>
</body>
</html>

5.	a) Write a java-based application to demonstrate the Updatable and Scrollable result sets. 
import java.sql.*;

public class UpdatableScrollable {
    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/mydb";
        try (Connection con = DriverManager.getConnection(url, "root", "pass");
             Statement st = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
             ResultSet rs = st.executeQuery("SELECT id, name, age FROM students")) {

            // Scroll to last
            if(rs.last()) System.out.println("Last student: " + rs.getString("name"));

            // Update first row age
            if(rs.first()) {
                rs.updateInt("age", rs.getInt("age")+1);
                rs.updateRow();
                System.out.println("Updated first row age");
            }

            // Insert new row
            rs.moveToInsertRow();
            rs.updateString("name", "New Student");
            rs.updateInt("age", 20);
            rs.insertRow();
            System.out.println("Inserted new row");

        } catch(Exception e) {
            System.out.println(e);
        }
    }
}
3️⃣ How It Works
Connection: Connects to mydb using root credentials.

Scrollable & Updatable ResultSet:

java
Copy code
ResultSet rs = st.executeQuery(..., TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
Scroll: rs.last() and rs.first() allow navigation.

Update Row: rs.updateInt(...) + rs.updateRow().

Insert Row: rs.moveToInsertRow() + rs.updateXXX() + rs.insertRow().

4️⃣ Run Steps
Create DB/Table in Workbench using the SQL above.

Download MySQL Connector JAR (mysql-connector-j-x.x.x.jar).

Compile Java:

bash
Copy code
javac -cp .;mysql-connector-j-9.0.0.jar UpdatableScrollable.java
Run Java:

bash
Copy code
java -cp .;mysql-connector-j-9.0.0.jar UpdatableScrollable
-- Create database
CREATE DATABASE mydb;

-- Use it
USE mydb;

-- Create table
CREATE TABLE students (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50),
    age INT
);

-- Insert sample data
INSERT INTO students(name, age) VALUES ('Rama', 21), ('Sita', 22);

) Build a responsive navigation bar using Flexbox. The items must adjust automatically and stack vertically on smaller screens.
<!-- nav.html -->
<!doctype html>
<html>
<head>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<style>
.nav{display:flex;gap:12px;background:#222;color:white;padding:12px;align-items:center;flex-wrap:wrap}
.nav a{color:white;text-decoration:none;padding:8px 12px;border-radius:6px}
.nav .brand{font-weight:bold;margin-right:auto}
@media (max-width:600px){
  .nav{flex-direction:column;align-items:stretch}
  .nav a{display:block;width:100%}
}
</style>
</head>
<body>
<nav class="nav">
  <div class="brand">MySite</div>
  <a href="#">Home</a>
  <a href="#">About</a>
  <a href="#">Services</a>
  <a href="#">Contact</a>
</nav>
</body>
</html>


6.	  a)  Write a java program to access meta data of the SQL database. 
// MetaDataExample.java
import java.sql.*;

public class MetaDataExample {
  public static void main(String[] args) throws Exception {
    Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb","root","pass");
    DatabaseMetaData dbmd = conn.getMetaData();
    System.out.println("DB Product: " + dbmd.getDatabaseProductName() + " Version: " + dbmd.getDatabaseProductVersion());

    Statement st = conn.createStatement();
    ResultSet rs = st.executeQuery("SELECT id,name,age FROM students LIMIT 1");
    ResultSetMetaData rsmd = rs.getMetaData();
    for(int i=1;i<=rsmd.getColumnCount();i++){
      System.out.println("Column " + i + ": " + rsmd.getColumnName(i) + " Type: " + rsmd.getColumnTypeName(i));
    }
    rs.close(); st.close(); conn.close();
  }
}
CREATE DATABASE mydb;
USE mydb;

CREATE TABLE students (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(50),
  age INT
);

INSERT INTO students (name, age) VALUES
('Rama', 21),
('Suraj', 22);
javac MetaDataExample.java
java -cp .;mysql-connector-j-8.3.0.jar MetaDataExample
DB Product: MySQL Version: 8.0.36
Column 1: id Type: INT
Column 2: name Type: VARCHAR
Column 3: age Type: INT


          b)  Develop an HTML page that demonstrates media queries to change background color, font size, and layout based on different screen widths (e.g., desktop, tablet, mobile).
<!-- media.html -->
<!doctype html>
<html>
<head>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<style>
body{font-family:Arial;margin:0;padding:0;background:#fff;color:#111}
.container{padding:20px}
@media (min-width:1001px){
  body{background:#eef}
  .container{font-size:18px;display:flex;gap:20px}
}
@media (max-width:1000px) and (min-width:601px){
  body{background:#f7f3e9}
  .container{font-size:16px}
}
@media (max-width:600px){
  body{background:#fffbe6}
  .container{font-size:14px;flex-direction:column}
}
</style>
</head>
<body>
<div class="container">
  <div style="flex:1">Column A content</div>
  <div style="flex:1">Column B content</div>
</div>
</body>
</html>


7.	 a) Write a program to accept request parameters from a form and generate the response.
method-1
Tomcat
 └── webapps
     └── FormApp
         ├── WEB-INF
         │    ├── web.xml
         │    └── classes
         │         └── FormServlet.class
         └── form.html
⚙️ 2. Step-by-step Procedure
🪜 Step 1: Create form.html
html
Copy code
<!doctype html>
<html>
<head><title>Form Example</title></head>
<body>
  <h2>Enter Details</h2>
  <form action="FormServlet" method="post">
    Name: <input type="text" name="name"><br><br>
    Email: <input type="email" name="email"><br><br>
    <input type="submit" value="Submit">
  </form>
</body>
</html>
Save this file inside your project folder (FormApp/).

🪜 Step 2: Create FormServlet.java
java
Copy code
import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;

public class FormServlet extends HttpServlet {
  protected void doPost(HttpServletRequest req, HttpServletResponse resp)
          throws ServletException, IOException {
    req.setCharacterEncoding("UTF-8");
    String name = req.getParameter("name");
    String email = req.getParameter("email");

    resp.setContentType("text/html;charset=UTF-8");
    PrintWriter out = resp.getWriter();
    out.println("<!doctype html><html><body>");
    out.println("<h2>Received Data</h2>");
    out.println("<p>Name: " + (name == null ? "(empty)" : name) + "</p>");
    out.println("<p>Email: " + (email == null ? "(empty)" : email) + "</p>");
    out.println("</body></html>");
  }
}
🪜 Step 3: Compile the Servlet
Open terminal (or Command Prompt):

bash
Copy code
cd "C:\Program Files\Apache Software Foundation\Tomcat 9.0\webapps\FormApp\WEB-INF\classes"
javac -cp "C:\Program Files\Apache Software Foundation\Tomcat 9.0\lib\servlet-api.jar" FormServlet.java
✅ This generates: FormServlet.class

🪜 Step 4: Configure web.xml
Inside WEB-INF/, create web.xml:

xml
Copy code
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" version="3.0">
  <servlet>
    <servlet-name>FormServlet</servlet-name>
    <servlet-class>FormServlet</servlet-class>
  </servlet>

  <servlet-mapping>
    <servlet-name>FormServlet</servlet-name>
    <url-pattern>/FormServlet</url-pattern>
  </servlet-mapping>
</web-app>
🪜 Step 5: Start Tomcat Server
Run Tomcat (via bin/startup.bat or through your IDE).

🪜 Step 6: Open in Browser
Go to:

bash
Copy code
http://localhost:8080/FormApp/form.html
➡️ Fill the form and submit.

You’ll see:

makefile
Copy code
Received Data
Name: Nikhil
Email: nikhil@gmail.com
✅ Output Screenshot (expected)
makefile
Copy code
Received Data
Name: Rama
Email: rama@mail.com

method-2
🪜 Step 1: Install & Configure Apache Tomcat

Download Tomcat 9 or 10
.

Extract it somewhere (e.g. C:\apache-tomcat-10.1).

Open Eclipse → Window → Preferences → Server → Runtime Environments → Add
→ Select Apache Tomcat v10.1 → Browse to your folder → Finish ✅

🪜 Step 2: Create Dynamic Web Project

Go to File → New → Dynamic Web Project

Project name: FormApp

Target runtime: Select Apache Tomcat v10.1

Dynamic web module version: 4.0

Click Finish

🪜 Step 3: Create HTML Form

Right-click your project → New → HTML File → Name it form.html
Paste this simple form 👇

<!doctype html>
<html>
<head><title>Form Example</title></head>
<body>
  <h2>Enter Details</h2>
  <form action="FormServlet" method="post">
    Name: <input type="text" name="name"><br><br>
    Email: <input type="email" name="email"><br><br>
    <input type="submit" value="Submit">
  </form>
</body>
</html>

🪜 Step 4: Create the Servlet

Right-click your project → New → Servlet

Name: FormServlet

Package: (leave blank or use) servlets

URL mapping: /FormServlet

Click Finish

Eclipse automatically creates FormServlet.java inside
Java Resources → src → FormServlet.java

Replace its content with 👇

import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;

public class FormServlet extends HttpServlet {
  protected void doPost(HttpServletRequest req, HttpServletResponse resp)
          throws ServletException, IOException {
    req.setCharacterEncoding("UTF-8");
    String name = req.getParameter("name");
    String email = req.getParameter("email");

    resp.setContentType("text/html;charset=UTF-8");
    PrintWriter out = resp.getWriter();
    out.println("<!doctype html><html><body>");
    out.println("<h2>Received Data</h2>");
    out.println("<p>Name: " + (name == null ? "(empty)" : name) + "</p>");
    out.println("<p>Email: " + (email == null ? "(empty)" : email) + "</p>");
    out.println("</body></html>");
  }
}

🪜 Step 5: Deploy & Run

Right-click the project → Run As → Run on Server

Choose Tomcat v10.1 → Finish

Eclipse starts the server automatically.

🪜 Step 6: Open in Browser

Go to:

http://localhost:8080/FormApp/form.html


✅ Enter your name and email → click Submit.

You’ll see output like:

Received Data
Name: Nikhil
Email: nikhil@gmail.com

b)  Design a fully styled, responsive registration form using HTML and CSS with proper layout, animations, and accessibility features
<!doctype html>
<html>
<head>
<meta charset="utf-8">
<title>Simple Registration</title>
<style>
body{font-family:Arial;background:#eef;padding:30px;text-align:center}
form{background:#fff;padding:20px;border-radius:8px;max-width:300px;margin:auto;box-shadow:0 0 10px #ccc}
input,button{width:100%;padding:8px;margin:6px 0}
button{background:#007bff;color:#fff;border:none;cursor:pointer}
</style>
</head>
<body>
<form onsubmit="return validate()">
  <h3>Register</h3>
  <input id="name" placeholder="Full name">
  <input id="email" placeholder="Email">
  <input id="pw" type="password" placeholder="Password">
  <p id="msg" style="color:red"></p>
  <button>Submit</button>
</form>

<script>
function validate(){
  let n=name.value.trim(), e=email.value.trim(), p=pw.value;
  if(n.length<3) return msg.textContent="Name too short", false;
  if(!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(e)) return msg.textContent="Invalid email", false;
  if(p.length<6) return msg.textContent="Password too short", false;
  msg.textContent=""; alert("Registered (mock)"); return false;
}
</script>
</body>
</html>


8.	a) Write a program to accept Servlet Config and Servlet Context parameters. 
🪜 Step 1: Create Dynamic Web Project

Open Eclipse IDE for Enterprise Java & Web Developers.

File → New → Dynamic Web Project

Project name: ConfigApp

Target runtime: Select Apache Tomcat

Dynamic Web Module version: 4.0 → Finish

Eclipse will create the folder structure:

ConfigApp/
 ┣ src/                  ← for Java classes
 ┣ WebContent/
 ┃ ┣ WEB-INF/
 ┃ ┗ index.html

🪜 Step 2: Add Servlet

Right-click src → New → Servlet

Name: ConfigExampleServlet

Package: servlets (optional)

URL mapping: /ConfigExampleServlet

Replace auto-generated code with:

import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;

public class ConfigExampleServlet extends HttpServlet {
  public void doGet(HttpServletRequest req, HttpServletResponse resp) 
          throws ServletException, IOException {
    ServletConfig cfg = getServletConfig();
    ServletContext ctx = getServletContext();

    String initVal = cfg.getInitParameter("sampleParam");
    String ctxVal = ctx.getInitParameter("globalParam");

    resp.setContentType("text/plain");
    PrintWriter out = resp.getWriter();
    out.println("Servlet init param: " + initVal);
    out.println("Context param: " + ctxVal);
  }
}

🪜 Step 3: Add Servlet Init Parameters

Edit WEB-INF/web.xml (or create it if missing):

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" version="4.0">

  <!-- Servlet Configuration -->
  <servlet>
    <servlet-name>ConfigExampleServlet</servlet-name>
    <servlet-class>servlets.ConfigExampleServlet</servlet-class>
    <init-param>
      <param-name>sampleParam</param-name>
      <param-value>Hello Servlet</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ConfigExampleServlet</servlet-name>
    <url-pattern>/ConfigExampleServlet</url-pattern>
  </servlet-mapping>

  <!-- Context Parameter (Global) -->
  <context-param>
    <param-name>globalParam</param-name>
    <param-value>Hello Context</param-value>
  </context-param>

</web-app>

🪜 Step 4: Run on Server

Right-click project → Run As → Run on Server

Select Tomcat

Eclipse will deploy the project automatically.

🪜 Step 5: Test in Browser

Go to URL:

http://localhost:8080/ConfigApp/ConfigExampleServlet


Expected output:

Servlet init param: Hello Servlet
Context param: Hello Context


Build an interactive web page where: A button changes color smoothly using a CSS transition when hovered.

<!-- transition.html -->
<!doctype html>
<html>
<head>
<style>
button {
  background:#2563eb;color:white;padding:12px 16px;border:none;border-radius:8px;cursor:pointer;
  transition: background-color 250ms ease, transform 150ms ease;
}
button:hover{ background:#1e40af; transform: translateY(-3px); }
</style>
</head>
<body>
<button>Hover me</button>
</body>
</html>


9.	a) Develop a Bootstrap form with validation and placeholder fields inside a modal dialog.
Include a Bootstrap table below to display user entries dynamically (mock data acceptable).
 b) Program Question 1: Add and Remove Products from Cart (push, pop, length)
Write a program that:
a. Creates an empty array cart
b. Adds 3 product objects (name, price) using push()
c. Removes the last product using pop()
d. Prints the updated cart and the total number of items using length
(a) Bootstrap Form inside Modal + Dynamic Table
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Bootstrap Modal Form</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="p-3">

<!-- Button to open modal -->
<button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#userModal">Add User</button>

<!-- Modal -->
<div class="modal fade" id="userModal">
  <div class="modal-dialog">
    <div class="modal-content p-3">
      <h5>Add User</h5>
      <form id="userForm">
        <input class="form-control mb-2" placeholder="Name" required>
        <input class="form-control mb-2" type="email" placeholder="Email" required>
        <button class="btn btn-success w-100">Submit</button>
      </form>
    </div>
  </div>
</div>

<!-- Table -->
<table class="table mt-3 table-bordered text-center">
  <thead><tr><th>Name</th><th>Email</th></tr></thead>
  <tbody id="userTable">
    <tr><td>Mock User</td><td>user@mail.com</td></tr>
  </tbody>
</table>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
document.querySelector("#userForm").addEventListener("submit", e=>{
  e.preventDefault();
  let inputs = e.target.querySelectorAll("input");
  document.querySelector("#userTable").innerHTML += 
    `<tr><td>${inputs[0].value}</td><td>${inputs[1].value}</td></tr>`;
  e.target.reset();
});
</script>
</body>
</html>


let cart = []; // empty array
cart.push({name:"Phone", price:10000});
cart.push({name:"Laptop", price:50000});
cart.push({name:"Mouse", price:500});

cart.pop(); // remove last item

console.log(cart);
console.log("Total items:", cart.length);


10.	  a)Develop a servlet  to add two numbers. 
🪜 Step 1: Setup Dynamic Web Project

Open Eclipse IDE for Enterprise Java & Web Developers.

Go to: File → New → Dynamic Web Project

Project Name: CalcApp

Target Runtime: Select your Apache Tomcat

Dynamic Web Module version: 4.0

Click Finish

Eclipse will create the folder structure like:

CalcApp/
 ┣ src/                  ← Java source
 ┣ WebContent/           ← HTML, JSP, static files
 ┃ ┣ WEB-INF/            ← web.xml, classes

🪜 Step 2: Add the Servlet

Right-click src → New → Servlet

Class Name: AddServlet

Package: servlets (optional)

URL Mapping: /AddServlet

Eclipse generates a template. Replace it with:

import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;

public class AddServlet extends HttpServlet {
  protected void doGet(HttpServletRequest req, HttpServletResponse resp) 
          throws ServletException, IOException {
    String a = req.getParameter("a"), b = req.getParameter("b");
    double x = 0, y = 0;
    try { x = Double.parseDouble(a); y = Double.parseDouble(b); } catch(Exception e){}
    double sum = x + y;
    resp.setContentType("text/plain");
    resp.getWriter().println("Sum = " + sum);
  }
}

🪜 Step 3: Configure web.xml (Optional)

If Eclipse didn’t automatically update mapping, edit WebContent/WEB-INF/web.xml:

<web-app xmlns="http://java.sun.com/xml/ns/javaee" version="4.0">
  <servlet>
    <servlet-name>AddServlet</servlet-name>
    <servlet-class>servlets.AddServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>AddServlet</servlet-name>
    <url-pattern>/AddServlet</url-pattern>
  </servlet-mapping>
</web-app>

🪜 Step 4: Run on Tomcat

Right-click project → Run As → Run on Server

Select your Tomcat Server → Finish

Eclipse deploys the project automatically.

🪜 Step 5: Test the Servlet in Browser

Open URL in browser:

http://localhost:8080/CalcApp/AddServlet?a=5&b=10


You’ll see:

Sum = 15.0

         b)Write an XML file which will display the Book information with the following fields:      Title of the book, Author Name, ISBN number, Publisher name, Edition, Price 
<?xml version="1.0" encoding="UTF-8"?>
<Book>
  <Title>Introduction to Algorithms</Title>
  <Author>Thomas H. Cormen</Author>
  <ISBN>9780262033848</ISBN>
  <Publisher>MIT Press</Publisher>
  <Edition>3</Edition>
  <Price>799.00</Price>
</Book>

