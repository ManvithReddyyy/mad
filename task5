open class Dwelling(val residents: Int) {
    open val Buildingmaterial: String = "unknown"
    open fun floorArea(): Double = 0.0
}

class Roundhut(residents: Int, val radius: Double) : Dwelling(residents) {
    override val Buildingmaterial = "Bamboo"
    override fun floorArea(): Double = Math.PI * radius * radius
}

class Squarecabin(residents: Int, val length: Double) : Dwelling(residents) {
    override val Buildingmaterial = "wood"
    override fun floorArea(): Double = length * length
}

class RoundTower(residents: Int, val radius: Double, val floors: Int) : Dwelling(residents) {
    override val Buildingmaterial = "stone"
    override fun floorArea(): Double = Math.PI * radius * radius * floors
}

fun main() {
    val hut = Roundhut(3, 10.0)
    val cabin = Squarecabin(2, 10.0)
    val tower = RoundTower(4, 15.5, 2)

    println("hut: material: ${hut.Buildingmaterial}, area = ${hut.floorArea()}")
    println("cabin: material: ${cabin.Buildingmaterial}, area = ${cabin.floorArea()}")
    println("tower: material: ${tower.Buildingmaterial}, area = ${tower.floorArea()}")
}
--------
package com.example.tipcalculator

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Button
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.tipcalculator.ui.theme.TipCalculatorTheme
import java.nio.file.WatchEvent

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            TipCalculator()
        }
    }
}
@Composable
fun TipCalculator(){
    var billAmount by remember {  mutableStateOf("") }
    var tipPercentage by remember { mutableStateOf("") }
    var tipAmount by remember  {mutableStateOf((0.0))}
    var totalAmount by remember  {mutableStateOf((0.0))}
        fun calculateTip(){
            val bill = billAmount.toDoubleOrNull()?:0.0
            val tippercent = tipPercentage.toDoubleOrNull()?:0.0
            tipAmount = bill*tippercent/100
            totalAmount = bill+tipAmount
        }
    Column(modifier = Modifier.fillMaxSize().padding(15.dp), horizontalAlignment = Alignment.CenterHorizontally, verticalArrangement = Arrangement.Center)
    {
        TextField(
            value = billAmount,
            onValueChange = {billAmount=it},
            label = {Text("Bill Amount")},
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(16.dp))
        TextField(
            value = tipPercentage,
            onValueChange = {tipPercentage=it},
            label = {Text("Tip Percentage")},
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(16.dp))
        Button(
            onClick = { calculateTip()}, modifier = Modifier.fillMaxWidth()
        ) {
            Text(text = "Calculate Tip")
        }
        Spacer(modifier = Modifier.height(16.dp))
        Text(text = "Tip:$tipAmount")
        Spacer(modifier = Modifier.height(16.dp))
        Text(text = "Total Amount:$totalAmount")
    }
}
------
my version 
import kotlin.math.PI
import kotlin.math.sqrt

fun main() {
    val squareCabin = SquareCabin(6, 50.0)
    val roundHut = RoundHut(3, 10.0)
    val roundTower = RoundTower(4, 15.5)

    with(squareCabin) {
        println("\nSquare Cabin\n============")
        println("Capacity: ${capacity}")
        println("Material: ${buildingMaterial}")
        println("Floor area: ${floorArea()}")
    }

    with(roundHut) {
        println("\nRound Hut\n=========")
        println("Material: ${buildingMaterial}")
        println("Capacity: ${capacity}")
        println("Floor area: ${floorArea()}")
        println("Has room? ${hasRoom()}")
        getRoom()
        println("Has room? ${hasRoom()}")
        getRoom()
        println("Carpet size: ${calculateMaxCarpetLength()}")
    }

    with(roundTower) {
        println("\nRound Tower\n==========")
        println("Material: ${buildingMaterial}")
        println("Capacity: ${capacity}")
        println("Floor area: ${floorArea()}")
        println("Carpet Length: ${calculateMaxCarpetLength()}")
    }
}



abstract class Dwelling(private var residents: Int) {
    abstract val buildingMaterial: String
    abstract val capacity: Int

    abstract fun floorArea(): Double

    fun hasRoom(): Boolean {
        return residents < capacity
    }

    fun getRoom() {
        if (capacity > residents) {
            residents++
            println("You got a room!")
        } else {
            println("Sorry, at capacity and no rooms left.")
        }
    }

}

class SquareCabin(residents: Int, val length: Double) : Dwelling(residents) {
    override val buildingMaterial = "Wood"
    override val capacity = 6


    override fun floorArea(): Double {
        return length * length
    }

}


open class RoundHut(
    residents: Int, val radius: Double) : Dwelling(residents) {

    override val buildingMaterial = "Straw"
    override val capacity = 4

    override fun floorArea(): Double {
        return PI * radius * radius
    }

    fun calculateMaxCarpetLength(): Double {
        return sqrt(2.0) * radius
    }
}


class RoundTower(
    residents: Int,
    radius: Double,
    val floors: Int = 2) : RoundHut(residents, radius) {

    override val buildingMaterial = "Stone"

    // Capacity depends on the number of floors.
    override val capacity = floors * 4

    override fun floorArea(): Double {
        return super.floorArea() * floors
    }
}

note: normal ga project chesthav kadha ala ne chesnaka “app” ani untadhi kadha on that right click chesi new ani click chesthe konni options lo scratch file ani untadhi adhi select chesi ni keyboard la Kotlin ani nokku adhi select chey andhula nuv ee code raay after that run untadhi kadha paina click chey anthe 
