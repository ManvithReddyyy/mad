package com.example.androidtriva

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.wrapContentSize
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.androidtriva.ui.theme.AndroidTrivaTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            val navController = rememberNavController()
            NavHost(navController = navController, startDestination = "title") {
                composable("title")
                {
                    TitleScreen(navController)
                }
                composable("game")
                {
                    QuizApp(navController)
                }
            }
        }
    }
}


// Data model for a question
data class Question(
    val text: String,
    val options: List<String>,
    val correctAnswer: String
)

// Sample questions
val questions = listOf(
    Question("What is the capital of India?", listOf("Bihar", "Telanga", "Delhi", "Andhra Pradesh"), "Delhi"),
    Question("Which planet is known as the Red Planet?", listOf("Earth", "Mars", "Jupiter", "Venus"), "Mars"),
    Question("What is the official language for Android Development?", listOf("Java", "Kotlin", "Python", "C++"), "Kotlin")
)
    @Composable
    fun TitleScreen(navController: NavController)
    {
        Column (modifier = Modifier.fillMaxSize().wrapContentSize(Alignment.Center)){
            Text(text="Go to game screen")
            Spacer(modifier = Modifier.height(35.dp))
            Button(
                onClick = {
                    navController.navigate("game")
                }
            ) {
                Text(text = "Start game")
            }

        }
    }
@Composable
fun QuizApp(navController: NavController) {
    var currentQuestionIndex by remember { mutableStateOf(0) }
    var score by remember { mutableStateOf(0) }
    var selectedOption by remember { mutableStateOf<String?>(null) }
    var showResult by remember { mutableStateOf(false) }

    if (showResult) {
        ResultScreen(score = score, total = questions.size, navController = navController)
    } else {
        val question = questions[currentQuestionIndex]
        QuizQuestion(
            question = question,
            selectedOption = selectedOption,
            onOptionSelected = { selectedOption = it },
            onPreviousClicked = {
                if (currentQuestionIndex > 0) {
                    currentQuestionIndex--
                    selectedOption = null
                }
            },
            onNextClicked = {
                if (selectedOption == question.correctAnswer) {
                    score++
                }
                selectedOption = null
                if (currentQuestionIndex < questions.lastIndex) {
                    currentQuestionIndex++
                } else {
                    showResult = true
                }
            },
            isFirst = currentQuestionIndex == 0,
            isLast = currentQuestionIndex == questions.lastIndex
        )
    }
}

@Composable
fun QuizQuestion(
    question: Question,
    selectedOption: String?,
    onOptionSelected: (String) -> Unit,
    onPreviousClicked: () -> Unit,
    onNextClicked: () -> Unit,
    isFirst: Boolean,
    isLast: Boolean
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(text = question.text, style = MaterialTheme.typography.headlineMedium)
        Spacer(modifier = Modifier.height(24.dp))

        // Options
        question.options.forEach { option ->
            Button(
                onClick = { onOptionSelected(option) },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 4.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = if (option == selectedOption) MaterialTheme.colorScheme.primary
                    else MaterialTheme.colorScheme.secondary
                )
            ) {
                Text(text = option)
            }
        }

        Spacer(modifier = Modifier.height(24.dp))

        // Previous + Next buttons
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Button(
                onClick = onPreviousClicked,
                enabled = !isFirst
            ) {
                Text("⬅ Previous")
            }

            Button(
                onClick = onNextClicked,
                enabled = selectedOption != null
            ) {
                Text(if (isLast) "Finish ➡" else "Next ➡")
            }
        }
    }
}
@Composable
fun ResultScreen(score: Int, total: Int, navController: NavController) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(text = "Quiz Completed!", style = MaterialTheme.typography.headlineMedium)
        Spacer(modifier = Modifier.height(16.dp))
        Text(text = "Your Score: $score / $total", style = MaterialTheme.typography.bodyLarge)
        Spacer(modifier = Modifier.height(24.dp))

        // Back Button
        Button(onClick = { navController.popBackStack() }) {
            Text("⬅ Go Back")
        }
    }
}
