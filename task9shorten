package com.example.androidtriva

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            val navController = rememberNavController()
            NavHost(navController, startDestination = "title") {
                composable("title") { TitleScreen(navController) }
                composable("game") { QuizApp(navController) }
            }
        }
    }
}

data class Question(val text: String, val options: List<String>, val correctAnswer: String)
val questions = listOf(
    Question("Capital of India?", listOf("Bihar", "Delhi"), "Delhi"),
    Question("Red Planet?", listOf("Earth", "Mars"), "Mars")
)

@Composable
fun TitleScreen(navController: NavController) {
    Column(Modifier.fillMaxSize(), Alignment.CenterHorizontally, Arrangement.Center) {
        Text("Go to game screen")
        Spacer(Modifier.height(20.dp))
        Button(onClick = { navController.navigate("game") }) { Text("Start game") }
    }
}

@Composable
fun QuizApp(navController: NavController) {
    var idx by remember { mutableStateOf(0) }
    var score by remember { mutableStateOf(0) }
    var selected by remember { mutableStateOf<String?>(null) }
    var showResult by remember { mutableStateOf(false) }

    if (showResult) {
        Column(Modifier.fillMaxSize(), Alignment.CenterHorizontally, Arrangement.Center) {
            Text("Quiz Completed! Score: $score/${questions.size}")
            Spacer(Modifier.height(20.dp))
            Button(onClick = { navController.popBackStack() }) { Text("Go Back") }
        }
    } else {
        val q = questions[idx]
        Column(Modifier.fillMaxSize(), Alignment.CenterHorizontally, Arrangement.Center) {
            Text(q.text)
            q.options.forEach { opt ->
                Button(
                    onClick = { selected = opt },
                    colors = ButtonDefaults.buttonColors(
                        containerColor = if (opt == selected) MaterialTheme.colorScheme.primary
                        else MaterialTheme.colorScheme.secondary
                    )
                ) { Text(opt) }
            }
            Spacer(Modifier.height(20.dp))
            Row {
                Button(onClick = {
                    if (idx > 0) {
                        idx--
                        selected = null
                    }
                }, enabled = idx > 0) { Text("Previous") }
                Spacer(Modifier.width(20.dp))
                Button(onClick = {
                    if (selected == q.correctAnswer) score++
                    selected = null
                    if (idx < questions.lastIndex) idx++
                    else showResult = true
                }, enabled = selected != null) { Text(if (idx == questions.lastIndex) "Finish" else "Next") }
            }
        }
    }
}
