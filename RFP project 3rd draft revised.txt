1.1 Square of a number

package com.example.clickableexample

fun main(){
    val input:Int?=readLine()?.toIntOrNull()
    if(input !=null){
        val square=input*input
        println("square of $input is $square")

    }
    else{
        println("input is null")
    }
}
​
1.2 Guess Number

package com.example.clickableexample

import kotlin.random.Random
import kotlin.random.nextInt

fun main(){
    val target=Random.nextInt(1,101)
    var guess:Int?=null
    println("Guess the number between 1 to 101")
    while(guess!=target){
        print("enter your guess")
        guess= readLine()?.toIntOrNull()
        if(guess == null) {
            println("Please enter a valid number")
            continue
        }
        when{
            guess<target->println("too low!try again")
            guess>target->println("too high!try again")
            else->println("You've guessed it.It is $target")
        }
    }
}
​
1.3 Greeting

package com.example.clickableexample

fun greet(name:String,message:String="Welcome"){
    println("$message,$name")
}
fun main(){
    greet("to mad lab")
    greet("CseE","This is")
}
​
2.1 Rolling die

class Dice{
  var sides:Int=6
  fun roll():Int{
    var randomNumber=(1..sides).random()
    return randomNumber
  }
}
fun main(){
  val d=Dice()
  val rolled=d.roll()
  println("${d.sides} sided dice rolled $rolled")
}


​
2.2 Companion Object

class Person{
  companion object{
    var count=0
    fun increment(){
      println("incremented")
      count++
    }
    fun display()=println("Hello")
  }
}
fun main(){
  println("Count=${Person.count}")
  Person.increment()
  Person.increment()
  println("After incrementing count=${Person.count}")
  Person.display()
}

GETTER AND SETTER
class Person{
  var name: String="Unknown"
  var age:Int=0
  get()=field
  set(value){
    field=if(value>=0) value else 0
  }
}
fun main(){
  val p=Person()
  p.name="Abc"
  p.age=34
  println("Name:${p.name}")
  println("Age:${p.age}")
}
​
3.1 Hello World


import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            display()

            }
        }
    }

@Composable
fun display(){
    Box(modifier = Modifier.fillMaxSize(),contentAlignment = Alignment.Center){

 Text(text="Hello world!",color=Color.Red,fontSize=30.sp,fontWeight=FontWeight.Bold)

    }
    }
​
3.2 Life Cycle

package com.example.lifecyclecompose

import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.sp
import com.example.lifecyclecompose.ui.theme.LifecyclecomposeTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        showToast("onCreate is created")
        enableEdgeToEdge()
        setContent {

                Display()
            }
        }
    

    override fun onStart() {
        super.onStart()
        showToast("onStart is created")
    }

    override fun onPause() {
        super.onPause()
        showToast("onPause is created")
    }

    override fun onResume() {
        super.onResume()
        showToast("onResume is created")
    }

    override fun onStop() {
        super.onStop()
        showToast("onStop is created")
    }

    override fun onDestroy() {
        super.onDestroy()
        showToast("onDestroy is created")
    }

    override fun onRestart() {
        super.onRestart()
        showToast("onRestart is created")
    }

    private fun showToast(message: String) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
    }
}

@Composable
fun Display() {
    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        Text(
            text = "Hello world!",
            color = Color.Red,
            fontSize = 30.sp,
            fontWeight = FontWeight.Bold
        )
    }
}
​
4.1 Login Page

MainActivity.kt


import android.content.Context
import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.contextaware.ContextAware
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Button
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.tooling.preview.Preview

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            LoginScreen()

        }
    }
}
@Composable
fun LoginScreen(){
    val context: Context = LocalContext.current
    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center){Button(
        onClick = {
           val intent=Intent(context, MainActivity2::class.java)
            intent.putExtra("username","rithika")
            context.startActivity(intent)

        }){
        Text("Go to second screen")
    }
}}





MainActivity2.kt

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.appcompat.app.AppCompatActivity
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

class MainActivity2 : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        val username=intent.getStringExtra("username")?:"Guest"
        setContent {
            HomeScreen(username)
        }
    }
}
@Composable
fun HomeScreen(name: String) {
    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center){
    Text(text = "Welcome $name", fontSize = 20.sp, fontWeight = FontWeight.Bold)
}}
​
4.2 Dice Roller

package com.example.diceroller

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import kotlin.random.Random

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            DiceScreen()
        }
    }
}

@Composable
fun DiceScreen() {
    var diceNumber by remember { mutableStateOf(1) }

    Column(
        modifier = Modifier.fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        // Dice Image
        Image(
            painter = painterResource(
                id = when (diceNumber) {
                    1 -> R.drawable.dice_1
                    2 -> R.drawable.dice_2
                    3 -> R.drawable.dice_3
                    4 -> R.drawable.dice_4
                    5 -> R.drawable.dice_5
                    else -> R.drawable.dice_6
                }
            ),
            contentDescription = "Dice Image",
            modifier = Modifier.size(150.dp)
        )

        Spacer(modifier = Modifier.height(20.dp))

        // Button to roll the dice
        Button(onClick = {
            diceNumber = Random.nextInt(1, 7)
        }) {
            Text(text = "Roll Dice")
        }
    }
}
​
5.1 Dwellings

open class Dwelling(val residents: Int) {
    open val Buildingmaterial: String = "unknown"
    open fun floorArea(): Double = 0.0
}

class Roundhut(residents: Int, val radius: Double) : Dwelling(residents) {
    override val Buildingmaterial = "Bamboo"
    override fun floorArea(): Double = Math.PI * radius * radius
}

class Squarecabin(residents: Int, val length: Double) : Dwelling(residents) {
    override val Buildingmaterial = "wood"
    override fun floorArea(): Double = length * length
}

class RoundTower(residents: Int, val radius: Double, val floors: Int) : Dwelling(residents) {
    override val Buildingmaterial = "stone"
    override fun floorArea(): Double = Math.PI * radius * radius * floors
}

fun main() {
    val hut = Roundhut(3, 10.0)
    val cabin = Squarecabin(2, 10.0)
    val tower = RoundTower(4, 15.5, 2)

    println("hut: material: ${hut.Buildingmaterial}, area = ${hut.floorArea()}")
    println("cabin: material: ${cabin.Buildingmaterial}, area = ${cabin.floorArea()}")
    println("tower: material: ${tower.Buildingmaterial}, area = ${tower.floorArea()}")
}
​
5.2 Tip Calculator

package com.example.tipcalculator

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Button
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.tipcalculator.ui.theme.TipCalculatorTheme
import java.nio.file.WatchEvent

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            TipCalculator()
        }
    }
}
@Composable
fun TipCalculator(){
    var billAmount by remember {  mutableStateOf("") }
    var tipPercentage by remember { mutableStateOf("") }
    var tipAmount by remember  {mutableStateOf((0.0))}
    var totalAmount by remember  {mutableStateOf((0.0))}
        fun calculateTip(){
            val bill = billAmount.toDoubleOrNull()?:0.0
            val tippercent = tipPercentage.toDoubleOrNull()?:0.0
            tipAmount = bill*tippercent/100
            totalAmount = bill+tipAmount
        }
    Column(modifier = Modifier.fillMaxSize().padding(15.dp), horizontalAlignment = Alignment.CenterHorizontally, verticalArrangement = Arrangement.Center)
    {
        TextField(
            value = billAmount,
            onValueChange = {billAmount=it},
            label = {Text("Bill Amount")},
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(16.dp))
        TextField(
            value = tipPercentage,
            onValueChange = {tipPercentage=it},
            label = {Text("Tip Percentage")},
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(16.dp))
        Button(
            onClick = { calculateTip()}, modifier = Modifier.fillMaxWidth()
        ) {
            Text(text = "Calculate Tip")
        }
        Spacer(modifier = Modifier.height(16.dp))
        Text(text = "Tip:$tipAmount")
        Spacer(modifier = Modifier.height(16.dp))
        Text(text = "Total Amount:$totalAmount")
    }
}
​
6.1 Affirmations

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.Card
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.s9.ui.theme.S9Theme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            Affirmation()
        }
    }
}data class Affirmation(var image:Int,var text:String)
@Composable
fun Affirmation(){
    var aff_images=listOf(Affirmation(R.drawable.img1,text="flower 1"),
        Affirmation(R.drawable.img2,text="Flower 2"),
    Affirmation(R.drawable.img3,text="Flower 3"),
        Affirmation(R.drawable.img4,text="Flower 4"),
        Affirmation(R.drawable.img5, text = "Flower 5"),
        Affirmation(R.drawable.img6,text="Flower 6"),
        Affirmation(R.drawable.img7, text = "Flower 7"),
        Affirmation(R.drawable.img8,text="Flower 8"),
        Affirmation(R.drawable.img9, text = "Flower 9"),
        Affirmation(R.drawable.img10, text = "Flower 10"),
        Affirmation(R.drawable.img11, text = "Flower 11")
    )
    LazyColumn(verticalArrangement = Arrangement.spacedBy(20.dp),
        modifier = Modifier.padding(16.dp)) {
        items(aff_images){
            affirmation ->(affirmationLayout(affirmation))
        }
    }
}
@Composable
fun affirmationLayout(affirmation: Affirmation){
    Card {
        Column(modifier = Modifier.fillMaxSize().padding(20.dp)) {
            Image(
                painter = painterResource(id = affirmation.image),
                contentDescription = null
            )
            (Text(text = affirmation.text, modifier = Modifier.padding(20.dp)))
        }
    }
}
​
6.2 Dictionary


mainActivity.kt
package com.example.dictionary

import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            Screen1()
        }
    }
}

@Composable
fun Screen1() {
    val context = LocalContext.current

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(24.dp)
    ) {
        Text(text = "Welcome to CSE-E", color = Color.Blue)

        Spacer(modifier = Modifier.height(16.dp))

        Button(onClick = {
            val intent = Intent(context, DetailActivity::class.java)
            // Sending name to second screen
            intent.putExtra("StudentName", "Sathvik")
            context.startActivity(intent)
        }) {
            Text(text = "Please Click")
        }
    }
}


DetailedActivity.kt

package com.example.dictionary

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Button
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

class DetailActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        val studentName = intent.getStringExtra("StudentName") ?: "Guest"

        setContent {
            Screen2(studentName)
        }
    }
}

@Composable
fun Screen2(name: String) {
    var query by remember { mutableStateOf("") }
    var meaning by remember { mutableStateOf("") }

    // Dictionary data
    val dictionary = mapOf(
        "Ravi" to "307",
        "Lucky" to "Srinidhi"
    )

    Column(
        modifier = Modifier.fillMaxSize().padding(24.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Top
    ) {
        Text(
            text = "Glad to meet you, $name !!",
            fontSize = 24.sp
        )

        Spacer(modifier = Modifier.height(40.dp))

        OutlinedTextField(
            value = query,
            onValueChange = { query = it },
            label = { Text("Enter a word") }
        )

        Spacer(modifier = Modifier.height(16.dp))

        Button(onClick = {
            meaning = dictionary[query] ?: "Word not found"
        }) {
            Text(text = "Search Here")
        }

        Spacer(modifier = Modifier.height(20.dp))

        Text(text = meaning, fontSize = 20.sp)
    }
}
​
7.1 Word App

1.
//in dependencies add
implementation("androidx.navigation:navigation-compose:2.9.3")
2.
package com.example.task_71

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.Button
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.task_71.ui.theme.Task71Theme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            AppNavigation()
        }
    }
}

@Composable
fun AppNavigation(){
    val navController= rememberNavController()
    Scaffold {
            innerPadding->
        NavHost(navController=navController,
            startDestination="home",
            modifier= Modifier.fillMaxSize().padding(innerPadding))
            {
            composable("home") { PartA(navController) }
            composable("word") { PartB(navController) }
            }
    }
}

@Composable
fun PartA(navController: NavHostController){
    Column(
        modifier = Modifier.fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ){
        Text("WORD APP", fontSize = 22.sp)
        Spacer(modifier = Modifier.height(16.dp))
        Button(onClick ={navController.navigate("word")}) {
            Text("Click me")
        }

    }
}

@Composable
fun PartB(navController: NavHostController){
    val words =listOf("Compose","Kotlin","Dictionary","Android","Navigation")
    Column(
        modifier = Modifier.fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally,
    ){
        Text("Words list", fontSize = 22.sp, modifier = Modifier.padding(16.dp))
        LazyColumn(modifier = Modifier.weight(1f)) {
            items(words){
                    word ->
                Text(
                    text = word,
                    fontSize = 20.sp,
                    modifier = Modifier.padding(8.dp)
                )
            }
        }
        Spacer(modifier = Modifier.height(16.dp))
        Button(onClick = {navController.popBackStack()},
            modifier = Modifier.padding(16.dp)) {
            Text("Back to home")
        }
    }
}
​
7.2 Unscramble game

Step 1: add dependencies in build.gradle.kts
implementation("androidx.lifecycle:lifecycle-viewmodel-compose:2.8.5")
implementation("androidx.compose.runtime:runtime-livedata")


-----------------------------------
Step 2:IncrementCounterApp.kt

package com.example.myapplication

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel

class IncrementCounterApp: ViewModel() {
    private var __counter  = MutableLiveData(0)
    var count : LiveData<Int> = __counter
    fun increment() {
        _counter.value = (_counter.value?:0) +1
    }
}
----------------------------

Step 3: MainActivity.kt
package com.example.myapplication

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Button
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.myapplication.ui.theme.MyApplicationTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            Increment()

        }
    }
}

@Composable
fun Increment() {
   val c: IncrementCounterApp= viewModel()
    val counter by c.count.observeAsState()
     Column (modifier = Modifier.fillMaxSize()
         .padding(32.dp),
         verticalArrangement = Arrangement.Center,
         horizontalAlignment = Alignment.CenterHorizontally)
     {
         Text(text="count:$counter", fontSize = 48.sp, color = Color.Red)
         Spacer(modifier = Modifier.height(24.dp))
         Button(onClick = {c.increment()}) {
             Text(text = "Increment")
         }
     }
}
​
8 Cupcake app

cupcakeapp/
│
├── .idea/                                                
│
├── navigation/
│   └── CupcakeNavHost.kt
│
├── ui/
│   │
│   ├── screens/
│   │   ├── FlavorScreen.kt
│   │   ├── PickupScreen.kt
│   │   ├── StartScreen.kt
│   │   └── SummaryScreen.kt
│   │
│   ├── theme/
│   │   ├── Color.kt
│   │   ├── Theme.kt
│   │   └── Type.kt
│   │
│   └── viewmodel/
│       └── OrderViewModel.kt
│
├── MainActivity.kt
│
├── cupcakeapp.iml
│
├── External Libraries/
│
└── Scratches and Consoles/


MainActivity.kt

package com.example.cupcakeapp

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.activity.viewModels
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.navigation.compose.rememberNavController
import com.example.cupcakeapp.navigation.CupcakeNavHost
import com.example.cupcakeapp.ui.theme.CupCakeAppTheme
import com.example.cupcakeapp.ui.viewmodel.OrderViewModel

class MainActivity : ComponentActivity() {
    private val orderViewModel: OrderViewModel by viewModels()
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            val navController = rememberNavController()
            CupcakeNavHost(navController = navController, viewModel = orderViewModel)
        }
    }
}


CupcakeNavHost.kt

package com.example.cupcakeapp.navigation

import androidx.compose.runtime.Composable
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import com.example.cupcakeapp.ui.screens.FlavorScreen
import com.example.cupcakeapp.ui.screens.PickupScreen
import com.example.cupcakeapp.ui.screens.StartScreen
import com.example.cupcakeapp.ui.screens.SummaryScreen
import com.example.cupcakeapp.ui.viewmodel.OrderViewModel

enum class CupcakeScreen { Start, Flavor, Pickup, Summary }

@Composable
fun CupcakeNavHost(
    navController: NavHostController,
    viewModel: OrderViewModel
) {
    NavHost(navController = navController, startDestination = CupcakeScreen.Start.name) {

        composable(CupcakeScreen.Start.name) {
            StartScreen(onNext = { qty ->
                viewModel.setQuantity(qty)
                navController.navigate(CupcakeScreen.Flavor.name)
            })
        }

        composable(CupcakeScreen.Flavor.name) {
            FlavorScreen(
                onNext = { navController.navigate(CupcakeScreen.Pickup.name) },
                onCancel = {
                    viewModel.resetOrder()
                    navController.popBackStack(CupcakeScreen.Start.name, inclusive = false)
                },
                viewModel = viewModel
            )
        }

        composable(CupcakeScreen.Pickup.name) {
            PickupScreen(
                onNext = { navController.navigate(CupcakeScreen.Summary.name) },
                onCancel = {
                    viewModel.resetOrder()
                    navController.popBackStack(CupcakeScreen.Start.name, inclusive = false)
                },
                viewModel = viewModel
            )
        }

        composable(CupcakeScreen.Summary.name) {
            SummaryScreen(
                viewModel = viewModel,
                onCancel = {
                    viewModel.resetOrder()
                    navController.popBackStack(CupcakeScreen.Start.name, inclusive = false)
                }
            )
        }
    }
}

FlavorScreen.kt

package com.example.cupcakeapp.ui.screens

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Button
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.example.cupcakeapp.ui.viewmodel.OrderViewModel

@Composable
fun FlavorScreen(
    onNext: () -> Unit,
    onCancel: () -> Unit,
    viewModel: OrderViewModel
) {
    val flavors = listOf("Vanilla", "Chocolate", "Red Velvet", "Lemon")

    Column(Modifier.fillMaxSize().padding(16.dp), horizontalAlignment = Alignment.CenterHorizontally, verticalArrangement = Arrangement.Center) {
        Text("Choose Flavor")
        Spacer(Modifier.height(16.dp))
        flavors.forEach { flavor ->
            Button(
                onClick = {
                    viewModel.setFlavor(flavor)
                    onNext()
                },
                modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp)
            ) {
                Text(flavor)
            }
        }
        Spacer(Modifier.height(16.dp))
        OutlinedButton(onClick = onCancel) { Text("Cancel Order") }
    }
}

PickupScreen.kt

package com.example.cupcakeapp.ui.screens



import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Button
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.example.cupcakeapp.ui.viewmodel.OrderViewModel

@Composable
fun PickupScreen(
    onNext: () -> Unit,
    onCancel: () -> Unit,
    viewModel: OrderViewModel
) {
    val options = viewModel.getPickupOptions()

    Column(Modifier.fillMaxSize().padding(16.dp), horizontalAlignment = Alignment.CenterHorizontally, verticalArrangement = Arrangement.Center) {
        Text("Choose Pickup Date")
        Spacer(Modifier.height(16.dp))
        options.forEach { date ->
            Button(
                onClick = {
                    viewModel.setDate(date)
                    onNext()
                },
                modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp)
            ) { Text(date) }
        }
        Spacer(Modifier.height(16.dp))
        OutlinedButton(onClick = onCancel) { Text("Cancel Order") }
    }
}

StartScreen.kt

package com.example.cupcakeapp.ui.screens

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

@Composable
fun StartScreen(onNext: (Int) -> Unit) {
    Column(Modifier.fillMaxSize().padding(85.dp), horizontalAlignment = Alignment.CenterHorizontally, verticalArrangement = Arrangement.Center) {
        Text("Choose quantity")
        Spacer(Modifier.height(16.dp))
        Button(onClick = { onNext(1) }) { Text("1 Cupcake") }
        Spacer(Modifier.height(8.dp))
        Button(onClick = { onNext(6) }) { Text("6 Cupcakes") }
        Spacer(Modifier.height(8.dp))
        Button(onClick = { onNext(12) }) { Text("12 Cupcakes") }
    }
}

SummaryScreen.kt

package com.example.cupcakeapp.ui.screens

import android.content.Context
import android.content.Intent
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import com.example.cupcakeapp.ui.viewmodel.OrderViewModel

@Composable
fun SummaryScreen(
    viewModel: OrderViewModel,
    onCancel: () -> Unit
) {
    val summary = viewModel.getOrderSummary()
    val context = LocalContext.current

    Column(Modifier.fillMaxSize().padding(16.dp), horizontalAlignment = Alignment.CenterHorizontally, verticalArrangement = Arrangement.Center) {
        Text(summary)
        Spacer(Modifier.height(16.dp))
        Button(onClick = { shareOrder(context, summary) }) {
            Text("Send Order")
        }
        Spacer(Modifier.height(8.dp))
        OutlinedButton(onClick = onCancel) { Text("Cancel Order") }
    }
}


fun shareOrder(context: Context, summary: String) {
    val intent = Intent(Intent.ACTION_SEND).apply {
        type = "text/plain"
        putExtra(Intent.EXTRA_TEXT, summary)
    }
    context.startActivity(Intent.createChooser(intent, "Share Cupcake Order"))
}

Color.kt

package com.example.cupcakeapp.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)

Theme.kt

package com.example.cupcakeapp.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.platform.LocalContext

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40

    /* Other default colors to override
    background = Color(0xFFFFFBFE),
    surface = Color(0xFFFFFBFE),
    onPrimary = Color.White,
    onSecondary = Color.White,
    onTertiary = Color.White,
    onBackground = Color(0xFF1C1B1F),
    onSurface = Color(0xFF1C1B1F),
    */
)

@Composable
fun CupCakeAppTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }

        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content
    )
}

Type.kt

package com.example.cupcakeapp.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp


val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
)

OrderViewModel.kt

package com.example.cupcakeapp.ui.viewmodel

import androidx.lifecycle.ViewModel
import java.text.SimpleDateFormat
import java.util.Calendar
import java.util.Locale

class OrderViewModel : ViewModel() {

    var quantity: Int = 0
        private set

    var flavor: String = ""
        private set

    var date: String = ""
        private set

    fun setQuantity(newQuantity: Int) { quantity = newQuantity }
    fun setFlavor(newFlavor: String) { flavor = newFlavor }
    fun setDate(newDate: String) { date = newDate }

    fun resetOrder() {
        quantity = 0
        flavor = ""
        date = ""
    }

    fun getPickupOptions(): List<String> {
        val options = mutableListOf<String>()
        val calendar = Calendar.getInstance()

        repeat(4) {
            val formatted = SimpleDateFormat("dd/MM/yyyy", Locale.getDefault())
                .format(calendar.time)
            options.add(formatted)
            calendar.add(Calendar.DATE, 1)
        }
        return options
    }

    fun getOrderSummary(): String =
        "Order Summary:\n" +
                "Quantity: $quantity\n" +
                "Flavor: $flavor\n" +
                "Pickup Date: $date"
}

9 Trivia App

package com.example.androidtriva

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.wrapContentSize
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.androidtriva.ui.theme.AndroidTrivaTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            val navController = rememberNavController()
            NavHost(navController = navController, startDestination = "title") {
                composable("title")
                {
                    TitleScreen(navController)
                }
                composable("game")
                {
                    QuizApp(navController)
                }
            }
        }
    }
}


// Data model for a question
data class Question(
    val text: String,
    val options: List<String>,
    val correctAnswer: String
)

// Sample questions
val questions = listOf(
    Question("What is the capital of India?", listOf("Bihar", "Telanga", "Delhi", "Andhra Pradesh"), "Delhi"),
    Question("Which planet is known as the Red Planet?", listOf("Earth", "Mars", "Jupiter", "Venus"), "Mars"),
    Question("What is the official language for Android Development?", listOf("Java", "Kotlin", "Python", "C++"), "Kotlin")
)
    @Composable
    fun TitleScreen(navController: NavController)
    {
        Column (modifier = Modifier.fillMaxSize().wrapContentSize(Alignment.Center)){
            Text(text="Go to game screen")
            Spacer(modifier = Modifier.height(35.dp))
            Button(
                onClick = {
                    navController.navigate("game")
                }
            ) {
                Text(text = "Start game")
            }

        }
    }
@Composable
fun QuizApp(navController: NavController) {
    var currentQuestionIndex by remember { mutableStateOf(0) }
    var score by remember { mutableStateOf(0) }
    var selectedOption by remember { mutableStateOf<String?>(null) }
    var showResult by remember { mutableStateOf(false) }

    if (showResult) {
        ResultScreen(score = score, total = questions.size, navController = navController)
    } else {
        val question = questions[currentQuestionIndex]
        QuizQuestion(
            question = question,
            selectedOption = selectedOption,
            onOptionSelected = { selectedOption = it },
            onPreviousClicked = {
                if (currentQuestionIndex > 0) {
                    currentQuestionIndex--
                    selectedOption = null
                }
            },
            onNextClicked = {
                if (selectedOption == question.correctAnswer) {
                    score++
                }
                selectedOption = null
                if (currentQuestionIndex < questions.lastIndex) {
                    currentQuestionIndex++
                } else {
                    showResult = true
                }
            },
            isFirst = currentQuestionIndex == 0,
            isLast = currentQuestionIndex == questions.lastIndex
        )
    }
}

@Composable
fun QuizQuestion(
    question: Question,
    selectedOption: String?,
    onOptionSelected: (String) -> Unit,
    onPreviousClicked: () -> Unit,
    onNextClicked: () -> Unit,
    isFirst: Boolean,
    isLast: Boolean
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(text = question.text, style = MaterialTheme.typography.headlineMedium)
        Spacer(modifier = Modifier.height(24.dp))

        // Options
        question.options.forEach { option ->
            Button(
                onClick = { onOptionSelected(option) },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 4.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = if (option == selectedOption) MaterialTheme.colorScheme.primary
                    else MaterialTheme.colorScheme.secondary
                )
            ) {
                Text(text = option)
            }
        }

        Spacer(modifier = Modifier.height(24.dp))

        // Previous + Next buttons
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Button(
                onClick = onPreviousClicked,
                enabled = !isFirst
            ) {
                Text("⬅ Previous")
            }

            Button(
                onClick = onNextClicked,
                enabled = selectedOption != null
            ) {
                Text(if (isLast) "Finish ➡" else "Next ➡")
            }
        }
    }
}
@Composable
fun ResultScreen(score: Int, total: Int, navController: NavController) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(text = "Quiz Completed!", style = MaterialTheme.typography.headlineMedium)
        Spacer(modifier = Modifier.height(16.dp))
        Text(text = "Your Score: $score / $total", style = MaterialTheme.typography.bodyLarge)
        Spacer(modifier = Modifier.height(24.dp))

        // Back Button
        Button(onClick = { navController.popBackStack() }) {
            Text("⬅ Go Back")
        }
    }
}


10 Game app

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Menu
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.compose.*
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
class MainActivity: ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent { GameApp() }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun GameApp() {
    val drawer = rememberDrawerState(DrawerValue.Closed)
    val scope = rememberCoroutineScope()
    val nav = rememberNavController()
    val items = listOf("home" to "Home", "about" to "About", "rules" to "Rules")

    ModalNavigationDrawer(
        drawerState = drawer,
        drawerContent = {
            ModalDrawerSheet {
                Box(Modifier.fillMaxWidth().height(150.dp), Alignment.Center) { Text("Game Menu") }
                items.forEach { (r, t) ->
                    NavigationDrawerItem(label = { Text(t) }, selected = false, onClick = {
                        nav.navigate(r) { popUpTo("home") { inclusive = r=="home" } }
                        scope.launch { drawer.close() }
                    })
                }
            }
        }
    ) {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = { Text("My Game App") },
                    navigationIcon = {
                        IconButton(onClick = { scope.launch { drawer.open() } }) {
                            Icon(Icons.Filled.Menu, null)
                        }
                    }
                )
            }
        ) { p ->
            Box(Modifier.padding(p).fillMaxSize()) {
                NavHost(nav, "home") {
                    composable("home") { CenterText("Welcome to the Game!") }
                    composable("about") { InfoScreen("About the Game", "This game challenges your mind and improves focus while having fun.") }
                    composable("rules") { InfoScreen("Game Rules", "1. Take turns.\n2. Finish in time.\n3. No cheating.\n4. Highest score wins.\n5. Play fair!") }
                }
            }
        }
    }
}

@Composable fun CenterText(t: String) = Box(Modifier.fillMaxSize(), Alignment.Center) { Text(t) }
@Composable fun InfoScreen(h: String, d: String) = Column(Modifier.fillMaxSize().padding(16.dp)) {
    Text(h, style = MaterialTheme.typography.headlineSmall); Spacer(Modifier.height(8.dp)); Text(d)
}

​
12 Room database

Step1: add dependencies
dependencies {
  val room_version = "2.8.2"
    implementation("androidx.room:room-runtime:$room_version")
implementation("androidx.room:room-ktx:${room_version}")
kapt("androidx.room:room-compiler:$room_version")
}
plugins{
kotlin("kapt")
}
Step2 : Create a data class file User.kt
User.kt
package com.example.csee

import androidx.room.Entity
import androidx.room.PrimaryKey
@Entity(tableName = "cseeusers")
data class User(
    @PrimaryKey(autoGenerate = true)
    val uid:Int=0,
    val username:String,
    val userPhone:String
)
Step3: create a new interface file userDAO.kt
UserDAO.kt 
package com.example.csee
import androidx.room.Dao
import androidx.room.Insert
@Dao
interface userDAO {
    @Insert
    suspend fun insert(user:User)
}
Step3: create a new kotlin file userDatabase.kt
userDatabase.kt
package com.example.csee
import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
@Database(entities = [User::class], version = 1)
abstract class UserDatabase: RoomDatabase(){
    abstract fun UserDAO():userDAO
    companion object{
        @Volatile
        private var INSTANCE: UserDatabase ?=null
        fun getInstance(context: Context):UserDatabase{
            return INSTANCE?:synchronized(this){
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    UserDatabase::class.java,
                    "rithika_db"
                ).build()
                INSTANCE=instance
                instance
            }
        }
    }
   
}
Step 4: MainActivity.kt
package com.example.csee
import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.wrapContentSize
import androidx.compose.material3.Button
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.room.util.TableInfo
import com.example.csee.ui.theme.CseeTheme
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
         val database= UserDatabase.getInstance(this)
            InsertRecord(database)
        }
    }
}
@Composable
fun InsertRecord(database: UserDatabase){
    var name by remember { mutableStateOf("") }
    var phonenum by remember { mutableStateOf("") }
    var context= LocalContext.current
    val userdao=database.UserDAO()
    val scope =rememberCoroutineScope()
    Column(modifier = Modifier.fillMaxSize().wrapContentSize(Alignment.Center)) {
        Text("Enter your details", fontSize = 35.sp, color = Color.Red)
        Spacer(modifier = Modifier.height(45.dp))
        //name
        OutlinedTextField(
            value = name, onValueChange = {name=it},
            label ={Text("Enter user name")},
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(45.dp))
        //phone no
        OutlinedTextField(
            value = phonenum, onValueChange = {phonenum=it},
            label ={Text("Enter phno")},
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(45.dp))
        Button(onClick = {
            scope.launch(Dispatchers.IO){
                userdao.insert(User(username =name,
                    userPhone=phonenum))
            }
            Toast.makeText(context,"Inserted successfully",
                Toast.LENGTH_LONG).show()
        }) {
            Text("Insert Now")
        }
    }
}